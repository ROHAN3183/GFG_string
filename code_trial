const express = require('express');
const router = express.Router();
const Problem = require('../models/Problem');

// Bulk Add Problems
router.post('/add-multiple', async (req, res) => {
  try {
    const problems = req.body;

    if (!Array.isArray(problems) || problems.length === 0) {
      return res.status(400).json({ msg: 'Invalid data format. Expected an array of problems.' });
    }

    await Problem.insertMany(problems);
    res.status(201).json({ msg: 'Problems added successfully' });
  } catch (err) {
    res.status(500).json({ msg: 'Server error', error: err.message });
  }
});

// ✅ GET All Problems
router.get('/', async (req, res) => {
  try {
    const problems = await Problem.find({});
    res.json(problems);
  } catch (err) {
    res.status(500).json({ msg: 'Server error', error: err.message });
  }
});

module.exports = router;



*******************************************************************************************************
All Problems.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>DSA Problems - DSA LearnHub</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    * {
      margin: 0; padding: 0; box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background-color: #f9f9f9;
      color: #333;
    }

    nav {
      background-color: #2d2dff;
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: white;
    }

    nav h1 {
      font-size: 24px;
    }

    nav ul {
      list-style: none;
      display: flex;
      gap: 20px;
    }

    nav ul li a {
      color: white;
      text-decoration: none;
      font-weight: 500;
    }

    .section {
      padding: 40px 30px;
    }

    .section h2 {
      font-size: 28px;
      margin-bottom: 20px;
      color: #2d2dff;
    }

    .problem-list {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .problem-card {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      transition: 0.3s;
    }

    .problem-card:hover {
      transform: scale(1.02);
    }

    .problem-card h3 {
      margin-bottom: 10px;
      color: #222;
    }

    .problem-meta {
      font-size: 14px;
      color: #666;
    }

    footer {
      background-color: #2d2dff;
      color: white;
      text-align: center;
      padding: 20px;
      margin-top: 40px;
    }
  </style>
</head>
<body>

  <nav>
    <h1>DSA LearnHub</h1>
    <ul>
      <li><a href="index.html">Home</a></li>
      <li><a href="#">Filter</a></li>
      <li><a href="#">Leaderboard</a></li>
    </ul>
  </nav>

  <div class="section">
    <h2>All Problems</h2>
    <div class="problem-list">
      <div class="problem-card">
        <h3>Two Sum</h3>
        <div class="problem-meta">Company: Amazon | Topic: Arrays, HashMap | Difficulty: Easy</div>
      </div>

      <div class="problem-card">
        <h3>Sliding Window Maximum</h3>
        <div class="problem-meta">Company: Microsoft | Topic: Sliding Window, Deque | Difficulty: Hard</div>
      </div>

      <div class="problem-card">
        <h3>Interval Merge</h3>
        <div class="problem-meta">Company: Google | Topic: Sorting, Greedy | Difficulty: Medium</div>
      </div>

      <div class="problem-card">
        <h3>Longest Substring Without Repeating Characters</h3>
        <div class="problem-meta">Company: Adobe | Topic: Strings, HashMap | Difficulty: Medium</div>
      </div>

      <div class="problem-card">
        <h3>Top K Frequent Elements</h3>
        <div class="problem-meta">Company: Amazon | Topic: Heap, HashMap | Difficulty: Medium</div>
      </div>
    </div>
  </div>

  <footer>
    © 2025 DSA LearnHub. All rights reserved.
  </footer>
  <script src="problem.js"></script>

</body>
</html>
this is problem.js
async function fetchProblems() {
  try {
    const response = await fetch('http://localhost:5000/api/problems');
    const data = await response.json();

    const list = document.querySelector('.problem-list');
    list.innerHTML = '';

    data.forEach(problem => {
      const card = document.createElement('div');
      card.className = 'problem-card';
      card.innerHTML = `
        <h3>${problem.title}</h3>
        <div class="problem-meta">
          Company: ${problem.company} | Topic: ${problem.topics.join(', ')} | Difficulty: ${problem.difficulty}
        </div>`;
      list.appendChild(card);
    });
  } catch (err) {
    console.error('Error fetching problems:', err);
  }
}

window.onload = fetchProblems;
make this such it will get the filter feature  first on clicking the All Problem  it will show all the probelm but after entering Home
Filter
Leaderboard
after cliking filter and and apply it will show according that
